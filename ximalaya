#!/usr/bin/ruby

require 'oga'
require 'json'
require 'net/http'
require 'open-uri'
require 'thread'
require 'open3'
require 'os'

def fetch_sound_list(url)
	puts 'fetching sound list...'
	body = open(url).read
	document = Oga.parse_html(body)
	soundids = document.xpath('//li/attribute::sound_id').map { |elem| elem.text }
	names = document.xpath('//li[@sound_id]//a[contains(@class, "title")]/attribute::title').map.with_index(1) { |elem, index| elem.text.match(/^\d/) ? elem.text : sprintf("%02d%s", index, elem.text) }
	titles = names.map { |text| text.gsub(/[\s\(\)\"\'\\\/-]/, '').gsub(/\.mp3/, '') }
	puts 'fetch sound list successfully'
	return Hash[soundids.zip(titles)]
end

def fetch_audio_url(id, name)
	return if File.exist?(name + '.mp3') or File.exist?(name + '.m4a')
	puts 'fetching audio url for ' + name + '...'
	body = Net::HTTP.get(URI.parse('http://www.ximalaya.com/tracks/' + id + '.json'))
	return JSON.parse(body)['play_path_32']
end

def convert_m4a_to_mp3(name)
	if not File.exist?(name + '.mp3') and File.exist?(name + '.m4a')
		puts 'converting ' + name + '...'
		stdout, stderr, status = Open3.capture3('ffmpeg -loglevel 16 -i ' + name + '.m4a -map 0:a -codec:a libmp3lame -q:a 4 -map_metadata -1 ' + name + '.mp3')
		if status.success?
			puts 'convert ' + name + ' successfully'
		else
			puts 'convert ' + name + ' failed '
			File.delete(name + '.mp3') if File.exist?(name + '.mp3')
		end
	end
end

def fetch_audio_file(url, name)
	return if File.exist?(name + '.m4a') or File.exist?(name + '.mp3') or url == nil
	puts 'downloading ' + name + '...'
	open(name + '.m4a', 'wb') do |file|
		file << open(url).read
	end
	puts 'download ' + name + ' successfully'
end

def fetch_audio(argv)
	if argv.empty?
		puts "usage: ./ximalaya.rb url [filter]"
		exit 1
	end

	url = argv[0]
	filter = argv[1]

	queue = Queue.new
	hash = fetch_sound_list(url)
	hash = hash.select{ |key, value| value.force_encoding('UTF-8').match(/#{filter}/) } if filter
	thread_count = [[OS.cpu_count - 1, 1].max, hash.keys.length].min
	puts 'create ' + thread_count.to_s + ' threads'
	thread_pool = (0...thread_count).map do
		Thread.new do
			begin
				while name = queue.pop
					convert_m4a_to_mp3(name)
				end
			end
		end
	end
	begin
		hash.keys.each do |id|
			name = hash[id]
			url = fetch_audio_url(id, name)
			fetch_audio_file(url, name)
			queue.push name
		end
	rescue Exception => e
		puts "catch one Exception: " + e.message
		puts e.backtrace
	end
	(0...thread_count).map do ||
		queue.push nil
	end
	thread_pool.map(&:join)
	hash.values.each { |name| File.delete(name + '.m4a') if File.exist?(name + '.m4a') }
end

fetch_audio(ARGV)
